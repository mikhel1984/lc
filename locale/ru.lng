---------- locale/ru.lng ----------
{
language =	 'Русский',
authors = [[Stanislav Mikhel]],
---------- dialog ----------
Dialog = {
["modules"]              = [[Доступные модули:]],
["use_import"]           = [[    
Используйте
  import 'module' ['module2' 'module3' ...]
для добавления дополнительных модулей.]],
["alias"]                = [[Используйте имя '%s' для доступа к модулю '%s'.]],
["done"]                 = [[Выполнено.]],
["intro"]                = [[Чтобы загрузить дополнительные модули, используйте 'import(модуль)'.
Справка доступна по команде 'help([функция])'.
Чтобы завершить работу, наберите 'quit()'.
]],
},
---------- main.lua ----------
Main = {
["__main__"]             = [[Lua как расширяемый калькулятор]],
["rand()"]               = [[Случайное число между 0 и 1.]],
["ath(x)"]               = [[Гиперболический арктангенс x.]],
["lg(x)"]                = [[Десятичный логарифм.]],
["example(name)"]        = [[Печатает примеры для данного модуля. В качестве примеров используются тестовые выражения.]],
["fx(str)"]              = [[Преобразование строкового выражения от x в функцию Lua.]],
["asin(x)"]              = [[Арксинус числа x.]],
["acos(x)"]              = [[Арккосинус числа x.]],
["th(x)"]                = [[Гиперболический тангенс x.]],
["sh(x)"]                = [[Гиперболический синус x.]],
["ch(x)"]                = [[Гиперболический косинус x.]],
["tan(x)"]               = [[Тангенс числа x.]],
["sqrt(a)"]              = [[Квадратный корень числа.]],
["ach(x)"]               = [[Гиперболический арккосинус x.]],
["eval(fn,x1[,xn[,step]])"] = [[Вычисление функции на интервале с заданным шагом. Результат выводится на экран.]],
["round(x)"]             = [[Округляет значение до ближайшего целого.]],
["ln(x)"]                = [[Натуральный логарифм.]],
["sin(x)"]               = [[Синус числа x.]],
["rad(x)"]               = [[Преобразование градусов в радианы.]],
["exp(x)"]               = [[Экспоненциальная зависимость.]],
["cos(x)"]               = [[Косинус числа x.]],
["atan(y[,x])"]          = [[Арктангенс числа y. Если заданы 2 аргумента, тангенс определяется как y/x с учётом знаков.]],
["pow(a,b)"]             = [[Вычисляет a^b.]],
["_e"]                   = [[Число Эйлера.]],
["floor(x)"]             = [[Возвращает наибольшее целое, меньшее или равное x.]],
["deserialize(obj_str)"] = [[Преобразует строку сериализации в объект LuaCalculus.]],
["ceil(x)"]              = [[Возвращает наименьшее целое, большее или равное x.]],
["lctype(t)"]            = [[Отображает тип объекта.]],
["flip(t[,N])"]          = [[Отображает содержимое таблицы Lua в удобном для пользователя виде. Спрашивает о продолжении после каждых N элементов (по умолчанию 10).]],
--["import"]               = [[]],
["abs(x)"]               = [[Абсолютная величина.]],
["plot(str[,a,b])"]      = [[Построение графика строчного выражения в Gnuplot. Выражение должно выражать зависимость от x. Можно указать интервал [a;b].]],
["_pi"]                  = [[Число пи.]],
["deg(x)"]               = [[Преобразование радиан в градусы.]],
["min(...)"]             = [[Находит минимальное из чисел.]],
["max(...)"]             = [[Находит максимальное из чисел.]],
["ash(x)"]               = [[Гиперболический арксинус x.]],
},
---------- rational.lua ----------
Rat = {
["__main__"]             = [[Операции с целыми числами произвольной длины.]],
["decimal(v)"]           = [[Возвращает десятичное представление дроби.]],
["De(v)"]                = [[Знаменатель рационального числа.]],
["Nu(v)"]                = [[Числитель рационального числа.]],
--["comparison"]           = [[a<b, a<=b, a>b, a>=b, a==b, a~=b ]],
["copy(v)"]              = [[Возвращает копию рационального числа.]],
["serialize(obj)"]       = [[Строковое представление рационального числа с учётом внутренней структуры.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, -a, a^b} ]],
["gcd(a,b)"]             = [[Наименьшее общее кратное двух чисел.]],
["Rat(m[,n])"]           = [[Возвращает рациональное число с указанными числителем и знаменателем (если задан).]],
},
---------- numeric.lua ----------
Num = {
["__main__"]             = [[Применение численных методов для решения ряда задач.]],
["newton(fn,x0)"]        = [[Поиск решения уравнения методом Ньютона, используется одна начальная точка.]],
["TOL"]                  = [[Точность вычислений (0.001 по умолчанию).]],
["diff(fn,x)"]           = [[Численное дифференцирование в заданной точке.]],
["ode(fn,x0,y0,xn[,dx])"] = [[Решение ОДУ. Функия возвращает таблицу найденных точек и конечное значение yn. Если шаг dx не задан, он вычисляется адаптивно.]],
["solve(fn,a,b)"]        = [[Поиск решения уравнения на заданном интервале.]],
["trapez(fn,a,b)"]       = [[Численное интегрирование на указанном интервале.]],
},
---------- bigint.lua ----------
Big = {
["__main__"]             = [[Операции с целыми числами произвольной точности.]],
["copy(v)"]              = [[Создаёт копию числа.]],
["tonumber(v)"]          = [[Преобразует число к целому либо с плавающей точкой.]],
["abs(v)"]               = [[Абсолютное значение целого числа.]],
--["comparison"]           = [[a<b, a<=b, a>b, a>=b, a==b, a~=b]],
["eq(a,b)"]              = [[Проверяет равенство двух чисел.]],
["factorial(n)"]         = [[Вычисляет факториал заданного числа.]],
["BASE"]                 = [[Основание системы счисления.]],
["serialize(obj)"]       = [[Строковое представление числа произвольной точности с учётом внутренней структуры.]],
["Big(v)"]               = [[Создаёт целое число произвольной точности из обычного числа или строки.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a%b, a^b, -a, #a]],
["str(v)"]               = [[Более удобное отображение длинного числа.]],
},
---------- units.lua ----------
Unit = {
["__main__"]             = [[Операции и преобразования с учётом единиц измерения.]],
["Unit(v[,u])"]          = [[Создание новой величины с заданными единицами измерения.]],
["copy(u)"]              = [[Копия элемента.]],
["convert(v, units)"]    = [[Преобразование единиц измерения, возвращает новый объект или nil.]],
["prefix"]               = [[Таблица возможных префиксов для единиц измерений.]],
["serialize(obj)"]       = [[Строковое представление объекта с единицами измерения.]],
["add(unit,rule)"]       = [[Добавление правила для преобразования заданных величин.]],
},
---------- polynom.lua ----------
Poly = {
["__main__"]             = [[Операции с полиномами.]],
["coef(...)"]            = [[Вычисляет полином через список его корней.]],
["copy(p)"]              = [[Создание копии полинома.]],
--["comparison"]           = [[a<b, a<=b, a>b, a>=b, a==b, a~=b]],
["serialize(obj)"]       = [[Строковое представление полинома с учётом внутренней структуры.]],
["int(p[,x0])"]          = [[Вычисляет первообразную интеграла, x0 - свободный коэффициент]],
["fit(X,Y,ord)"]         = [[Аппроксимация данных полиномом заданной степени.]],
["val(p,x)"]             = [[Вычисляет значение полинома в заданной точке.]],
["Poly(...)"]            = [[Формирует полином из списка коэффициентов.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^n, -a]],
["real(p)"]              = [[Возвращает список действительных корней полинома.]],
["der(p[,x])"]           = [[Вычисление производной полинома. Возвращает значение в точке, если она задана.]],
},
---------- array.lua ----------
Arr = {
["__main__"]             = [[Манипуляции с массивами элементов. По-умолчанию, массив разряженный.]],
["serialize(obj)"]       = [[Строковое представление массива с учётом внутренней структуры.]],
["Arr(size)"]            = [[Формирует пустой массив заданной размерности.]],
--["comparison"]           = [[a == b, a ~= b]],
["fullstring(arr,r,c)"]  = [[Строковое представление массива в виде последовательности двумерных раскладок. Индексы r и c обозначают отображаемые оси.]],
["concat(a1,a2,axe)"]    = [[Объединение двух массивов вдоль заданной оси.]],
["get(arr,ind)"]         = [[Извлечь значение элемента. Индекс представлен в виде таблицы.]],
["copy(arr)"]            = [[Создание копии массива.]],
["next(arr)"]            = [[Возвращает итератор по всем индексам значениям массива.]],
["apply(a1,a2,fn)"]      = [[Применить к массивам функцию двух переменных. Возвращает новый массив.]],
["rand(size)"]           = [[Возвращает массив случайных чисел заданной размерности.]],
["dim(arr)"]             = [[Возвращает список размеров массива.]],
["map(a,fn)"]            = [[Применить к массиву функцию одного переменного. Возвращает новый массив.]],
["sub(arr,ind1,ind2)"]   = [[Выделение части массива, ограниченной двумя индексами.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, -a, a^b]],
["set(arr,ind,val)"]     = [[Установить значение элемента. Индекс в виде таблицы.]],
["isequal(a1,a2)"]       = [[Сопоставление размерностей двух массивов.]],
},
---------- gnuplot.lua ----------
Gnu = {
["__main__"]             = [[Интерфейс для работы с Gnuplot из Lua.]],
["Gnu([g])"]             = [[Делает таблицу Gnuplot-совместимым объектом программы.]],
["keys"]                 = [[  Описание параметров:
{'sin(x)'}                                   -- функция задана в текстовом виде
{math.sin, title='sinus'}                    -- строит график для Lua функции, добавляет текст в легенду
{file='sin.dat', ln=1, lw=2}                 -- строит график для файла с учётом цвета и толщины маркеров
{tbl, with='lines'}                          -- строит график для Lua таблицы с помощью линий
title='Graph name'                           -- имя графика в целом
xrange={0,10}                                -- диапазон x от 0 до 10
yrange={-2,2}                                -- диапазон y
zrange={0,5}                                 -- диапазон z
trange={1,2}                                 -- изменение параметра в случае параметрической функции
xtitle='A', ytitle='B'                       -- именя осей
terminal='jpeg'                              -- сохранение результата в файл
output='my_plot.jpg'                         -- имя файла для вывода результата
parametric=true                              -- параметрическое представление функции
size='square'                                -- установить квадратный размер изображения
polar=true                                   -- график в полярных координатах
grid='polar'                                 -- изменить тип сетки на полярный
legend=false                                 -- отключить легенду
surface=true                                 -- построение трёхмерного графика
samples=200                                  -- задать число точек на графике
permanent=true                               -- сохранить окно графика при завершении программы (по-умолчанию)
raw='set pm3d'                               -- позволяет написать команды Gnuplot в явном виде
]],
["N"]                    = [[Если шаг не указан, интервал делится на данное количество отрезков.]],
["copy(g)"]              = [[Создаёт копию объекта с параметрами построения графика.]],
["plot(g)"]              = [[Строит график функций, представленных в виде таблицы Lua.]],
["isavailable(g)"]       = [[Проверка, все ли опции предопределены.]],
},
---------- complex.lua ----------
Comp = {
["__main__"]             = [[Комплексные числа и манипуляции с ними.]],
["serialize(obj)"]       = [[Строковое представление комплексного числа с учётом внутренней структуры.]],
["conj(v)"]              = [[Возвращает комплексно сопряжённое число.]],
["Im(v)"]                = [[Мнимая часть числа.]],
["trig(module,angle)"]   = [[Создаёт комплексное число на основе тригонометрического представления.]],
--["comparison"]           = [[a==b, a~=b]],
["_i"]                   = [[Комплексная единица.]],
["sqrt(v)"]              = [[Квадратный корень положительного или отрицательного числа.]],
["arg(v)"]               = [[Вычисляет аргумент (угол) комплексного числа.]],
["copy(c)"]              = [[Возвращает копию комплексного числа.]],
["Re(v)"]                = [[Действительная часть числа.]],
["abs(v)"]               = [[Возвращает модуль комплексного числа.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
["Cmp(a [,b])"]          = [[Создаёт комплексное число через указание действительной (и мнимой) частей.]],
},
---------- stat.lua ----------
Stat = {
["__main__"]             = [[Статистические вычисления. Данные должны быть представлены в виде Lua таблиц.]],
["sum(t)"]               = [[Сумма элементов выборки.]],
["geomean(t[,w])"]       = [[Геометрическое среднее.]],
["moment(n,x[,p])"]      = [[Расчёт момента x порядка n, p - список весов.]],
["cmoment(n,x[,p])"]     = [[Центральный момент x порядка n, p - список весов.]],
["max(t)"]               = [[Наибольший элемент и его индекс.]],
["mean(t[,w])"]          = [[Расчёт среднего значения (с учётом весов).]],
["harmean(t[,w])"]       = [[Гармоническое среднее.]],
["min(t)"]               = [[Минимальный элемент и его индекс.]],
["freq(t)"]              = [[Возвращает таблицу с частотами элементов.]],
["median(t)"]            = [[Медиана списка.]],
["stdcorr(t)"]           = [[Скорректированные значения стандартного отклонения и дисперсии.]],
["std(t[,w])"]           = [[Стандартное отклонение и дисперсия (с учётом весов).]],
},
---------- set.lua ----------
Set = {
["__main__"]             = [[Работа с множествами элементов.]],
["Set(t)"]               = [[Создать множество из элементов таблицы.]],
["check(set,val)"]       = [[Проверить принадлежность элемента множеству.]],
["map(s,fn)"]            = [[Получить отображение множества с помощью функции fn().]],
["copy(s)"]              = [[Возвращает копию множества.]],
--["comparison"]           = [[a==b, a~=b, a<b, a<=b, a>b, a>=b]],
["table(set)"]           = [[Представить множество в виде Lua-таблицы.]],
["serialize(obj)"]       = [[Строковое представление множества с учётом внутренней структуры.]],
["insert(set,val)"]      = [[Добавить в множество заданный элемент.]],
["remove(set,val)"]      = [[Удалить из множества заданный элемент.]],
--["union, intersection, difference"] = [[a+b, a*b, a/b]],
},
---------- matrix.lua ----------
Mat = {
["__main__"]             = [[Операции с матрицами. Индексация начинается с 1. По-умолчанию, матрицы разряжённые.]],
["rref(A,b)"]            = [[Применяет метод Гаусса для решения системы линейных уравнений. Возвращает полученную матрицу и детерминант.]],
--["comparison"]           = [[a==b, a~=b]],
["row(m,k)"]             = [[Возвращает k-ую строку матрицы.]],
["fill(rows,cols,fn)"]   = [[Формирует матрицу, элементы которой определяются функцией fn(r,c).]],
["cholesky(m)"]          = [[Преобразование Холески для положительно определённой симметричной матрицы.]],
["Mat(...)"]             = [[Формирование матрицы. Аргументы являются списком строк, каждая из которых - таблица чисел.]],
["get(m,row,col)"]       = [[Возвращает значение элемента. Можно просто использовать операцию m(row,col).]],
["transpose(m)"]         = [[Возвращает транспонированную матрицу. Сокращённая форма - T().]],
["inv(m)"]               = [[Вычисляет обратную матрицу.]],
["apply(m1,m2,fn)"]      = [[Применяет fn(v1,v2) к каждой паре элементов матриц m1 и m2.]],
["pinv(M)"]              = [[Вычисление псевдоинверсной матрицы через SVD разложение.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
["sub(m,r1,r2,c1,c2)"]   = [[Возвращает подматрицу для указанного интервала строк и столбцов.]],
["det(m)"]               = [[Определитель матрицы.]],
["sparse(m)"]            = [[Возвращает разряжённую матрицу.]],
["serialize(obj)"]       = [[Строковое представление матрицы с учётом внутренней структуры.]],
["map(m,fn)"]            = [[Применяет указанную функцию fn(x) ко всем элементам матрицы, возвращает новую матрицу.]],
["eye(rows[,cols])"]     = [[Единичная матрица заданного размера.]],
["ones(rows[,cols[,val]])"] = [[Формирует матрицу, все элементы которой равны заданному числу (по-умолчанию 1).]],
["copy(m)"]              = [[Возвращает копию матрицы.]],
["lu(m)"]                = [[LU разложение матрицы. Возвращает L,U и P элементы.]],
["dot(a,b)"]             = [[Скалярное произведение двух 3-элементных векторов.]],
["cross(a,b)"]           = [[Векторное произведение 3-элементных векторов.]],
["diag(M[,n])"]          = [[Возвращает диагональные элементы либо создаёт матрицу, используя заданный вектор в качестве диагонали со смещением n.]],
["zeros(rows[,cols])"]   = [[Матрица нулей с заданными размерами.]],
["map_ex(m,fn)"]         = [[Применяет функцию fn(row,col,val) ко всем элементам матрицы, возвращает новую матрицу.]],
["dense(m)"]             = [[Возвращает плотную матрицу.]],
["rand(rows[,cols])"]    = [[Матрица случайных чисел от 0 до 1.]],
["set(m,row,col)(val)"]  = [[Установить значение элемента матрицы.]],
["tr(m)"]                = [[След матрицы.]],
["concat(m1,m2,dir)"]    = [[Объединяет 2 матрицы по горизонтали (dir='h') или вертикали (dir='v').
Для горизонтальной конкатенации можно использовать запись m1..m2, для вертикальной - m1//m2.]],
["col(m,k)"]             = [[Возвращает k-й столбец матрицы.]],
["size(m)"]              = [[Возвращает число строк и столбцов матрицы.]],
},
}