---------- locale/ru.lng ----------
{
language =	 'Русский',
authors = [[Станистав Михель]],
---------- dialog ----------
Dialog = {
["use_import"]           = [[Используйте
  import 'module' ['module2' 'module3' ...]
для подключения дополнительных модулей.]],
["alias"]                = [[Используйте имя '%s' для доступа к модулю '%s'.]],
["done"]                 = [[Выполнено.]],
["intro"]                = [[-------- help([функция]) = справка --------------
--------- import(модуль) = импорт функций -------
--------- run(имя_файла) = выполнить Lua скрипт -
----------------- quit() = выход ----------------
]],
},
---------- main.lua ----------
Main = {
["__module__"]           = [[Программа для математических расчётов на Lua.]],
["_ans"]                 = [[Результат последней операции.]],
["lc.show(t[,N=10])"]    = [[Распечатка объекта Lua. Таблица печатается группами с заданным количеством элементов N.]],
["acos(x)"]              = [[Арккосинус x.]],
["cosh(x)"]              = [[Гиперболический косинус.]],
["asinh(x)"]             = [[Гиперболический арксинус.]],
["atan2(y,x)"]           = [[Арктангенс, который учитывает знаки агрументов.]],
["sqrt(a)"]              = [[Квадратный корень числа.]],
["lc.evalTF(src[,dst])"] = [[Функция читает текст из файла, вычисляет выражения, заключённые в ##...##, и замещает их. Результат записывается в новый файл, либо выводится на экран.]],
["exp(x)"]               = [[Экспоненциальная зависимость.]],
["lc.sci(x)"]            = [[Запись числа в 'нучном' виде.]],
["lc.map(fn,tbl)"]       = [[Вычисляет функцию для всех элементов списка (таблицы), возвращает новый список.]],
["atan(x)"]              = [[Арктангенс x.]],
["tanh(x)"]              = [[Гиперболический тангенс.]],
["rand()"]               = [[Случайное число от 0 до 1.]],
["asin(x)"]              = [[Арксинус x.]],
["log(x)"]               = [[Натуральный логарифм.]],
["lc.range([from=1,]to[,step=1])"] = [[Генерация последовательности чисел в заданном диапазоне.]],
["lc.type(t)"]           = [[Печатает тип объекта, распознаёт типы, заданные в Sonata.]],
["randi(N)"]             = [[Случайное целое число от 1 до N.]],
["lc.round(x[,n=0])"]    = [[Округление числа до заданного количества десятичных знаков.]],
["tan(x)"]               = [[Тангенс x.]],
["abs(x)"]               = [[Абсолютное значение (модуль) числа.]],
["sinh(x)"]              = [[Гиперболический синус.]],
["acosh(x)"]             = [[Гиперболический арккосинус.]],
["_pi"]                  = [[Число pi.]],
["cos(x)"]               = [[Косинус x.]],
["atanh(x)"]             = [[Гиперболический арктангенс.]],
["_e"]                   = [[Число Эйлера.]],
["sin(x)"]               = [[Синус x.]],
},
---------- units.lua ----------
Unit = {
["__module__"]           = [[Операции с единицами измерения.]],
["prefix"]               = [[Таблица дольных и кратных приставок.]],
--["comparison"]           = [[U1==U2, U1~=U2, U1<U2, U1<=U2, U1>U2, U1>=U2]],
["copy(U)"]              = [[Создание копии объекта с его единицами измерения.]],
["convert(v, units)"]    = [[Преобразование между единицами измерения, функция возвращает новый объект или nil.]],
--["arithmetic"]           = [[U1+U2, U1-U2, U1*u2, U1/U2, U1^n]],
["add(U,rule)"]          = [[Добавление нового правила преобразования единиц измерения.]],
["Unit(v[,u])"]          = [[Создание числа и/или единиц измерения.]],
},
---------- rational.lua ----------
Rat = {
["__module__"]           = [[Операции с числами, представленными в виде дроби.]],
["gcd(a,b)"]             = [[Наибольший общий делитель.]],
["copy(R)"]              = [[Возвращает копию рационального числа.]],
--["arithmetic"]           = [[R1+R2, R1-R2, R1*R2, R1/R2, -R, R1^R2} ]],
["Rat(m[,n=1])"]         = [[Для создания рационального числа укажите числитель и (опционально) знаменатель.]],
["De(R)"]                = [[Возвращает знаменатель.]],
--["comparison"]           = [[R1<R2, R1<=R2, R1>R2, R1>=R2, R1==R2, R1~=R2]],
["Nu(R)"]                = [[Возвращает числитель.]],
["val(R)"]               = [[Представление рационального числа в десятичном виде.]],
},
---------- struct.lua ----------
DS = {
["__module__"]           = [[Некоторые структуры данных.]],
--["Set: comparison"]      = [[S1==S2, S1~=S2, S1<S2, S1<=S2, S1>S2, S1>=S2]],
--["Queue.popBack(Q)"]     = [[Get value from the end of queue, remove it.]],
--["Queue.isEmpty(Q)"]     = [[Return true if the queue is empty.]],
--["Queue.pushFront(Q,val)"] = [[Add value to the top of queue.]],
--["Heap.size(H)"]         = [[Get number of elements in the heap.]],
--["Stack.copy(S)"]        = [[Create copy of the stack.]],
--["Set.copy(S)"]          = [[Get copy of the set.]],
--["Queue.copy(Q)"]        = [[Make copy of the queue.]],
--["Queue()"]              = [[Create new queue.]],
--["Queue.push(Q,val)"]    = [[Add value to the back of queue.]],
--["Heap([less])"]         = [[Create new heap object. Comparison method 'less' can be predefined.]],
--["Stack.push(S,val)"]    = [[Push value to the stack (except nil).]],
--["Set.list(S)"]          = [[Represent set as a list of elements.]],
--["Heap.top(H)"]          = [[Return value of the top element.]],
--["Stack.pop(S)"]         = [[Pop value from the stack, return element or nil.]],
--["Stack.isEmpty(S)"]     = [[Return true if the stack is empty.]],
--["Set.add(S,val)"]       = [[Insert element into set.]],
--["Heap.pop(H)"]          = [[Return top element. For the default less() function top is maximum.]],
--["Queue.size(Q)"]        = [[Return number of elements in queue.]],
--["Set(t)"]               = [[Create new set from table of elements.]],
--["Set.isEmpty(S)"]       = [[Return true if the set is empty.]],
--["Set.size(S)"]          = [[Number of elements in the set.]],
--["Stack.size(S)"]        = [[Return number of elements in stack.]],
--["Set: union, intersection, difference"] = [[S1+S2, S1*S2, S1/S2]],
--["Queue.front(Q)"]       = [[Get next element, don't remove it.]],
--["Set.map(S,fn)"]        = [[Apply function fn() to obtain new set.]],
--["Stack()"]              = [[Create new stack.]],
--["Set.remove(S,val)"]    = [[Remove element from set.]],
--["Queue.pop(Q)"]         = [[Get value from the top of queue, remove it.]],
--["Heap.push(H,v)"]       = [[Add element to the heap.]],
--["Queue.back(Q)"]        = [[Get next element, don't remove it.]],
--["Heap.copy(H)"]         = [[Make copy of the heap.]],
--["Stack.top(S)"]         = [[Return top value without removing it.]],
--["Heap.isEmpty(H)"]      = [[Return true if the heap is empty.]],
},
---------- array.lua ----------
Arr = {
--["__module__"]           = [[Manipulations with arrays of elements.]],
--["isEqual(A1,A2)"]       = [[Check size equality.]],
--["copy(A)"]              = [[Get copy of the array.]],
--["next(A)"]              = [[Return iterator along all indexes.]],
--["Arr(tSize)"]           = [[Create empty array with given size, represented as a table.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, -a, a^b]],
--["set(A,tInd,val)"]      = [[Set value to the array. Index is a table.]],
--["comparison"]           = [[a == b, a ~= b]],
--["sub(A,tInd1,tInd2)"]   = [[Return sub array restricted by 2 indexes.]],
--["dim(A)"]               = [[Return size of array.]],
--["rand(tSize)"]          = [[Return array with random numbers between 0 and 1.]],
--["concat(A1,A2,nAxis)"]  = [[Array concatenation along the given axis.]],
--["apply(func, ...)"]     = [[Apply function of several arguments. Return new array.]],
--["capacity(A)"]          = [[Maximal number of elements in the array. The same as #A.]],
--["map(A,func)"]          = [[Apply function of 1 argument. Return new array.]],
--["get(A,tInd)"]          = [[Get array element. Index is a table.]],
},
---------- const.lua ----------
_C = {
["__module__"]           = [[Разнообразные константы.]],
--["ly"]                   = [[One light year.]],
--["e"]                    = [[Electron charge.]],
--["sigma"]                = [[Stefan-Boltzmann constant.]],
--["NA"]                   = [[Avogadro's number.]],
--["phi"]                  = [[Golden ratio.]],
--["EuMa"]                 = [[Difference between harmonic series and the natural logarithm.]],
--["c"]                    = [[Speed of light.]],
--["Rinf"]                 = [[Rydberg constant]],
--["Vm"]                   = [[Volume of one mole of ideal gas.]],
--["g"]                    = [[Acceleration of free fall.]],
--["G"]                    = [[Gravitational constant.]],
--["k"]                    = [[Boltzmann's constant.]],
--["remove(name)"]         = [[Delete constant.]],
--["add(name,value)"]      = [[Create new constant.]],
--["h"]                    = [[Planck's constant.]],
--["pc"]                   = [[One parsec.]],
--["R"]                    = [[Universal gas constant.]],
--["eps0"]                 = [[Permittivity of free space.]],
--["mu0"]                  = [[Permeability of free space.]],
},
---------- bigint.lua ----------
Big = {
["__module__"]           = [[Вычисления с целыми числами произвольной длины.]],
--["copy(v)"]              = [[Return copy of given number.]],
--["abs(v)"]               = [[Return module of arbitrary long number.]],
--["str(B[,n=3])"]         = [[More readable string representation of the number. Optional argument defines number of digits in a group.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a%b, a^b, -a, #a]],
--["eq(a,b)"]              = [[Check equality of two values.]],
--["size(B)"]              = [[Number of digits, the same as #B.]],
--["BASE[=10]"]            = [[The radix of big integer representation.]],
--["val(N)"]               = [[Represent current big integer as number if it possible.]],
--["comparison"]           = [[a<b, a<=b, a>b, a>=b, a==b, a~=b]],
--["Big(v)"]               = [[Create big number from integer or string.]],
--["fact(B)"]              = [[Return factorial of non-negative integer n.]],
},
---------- numeric.lua ----------
Num = {
["__module__"]           = [[Функции для численных расчётов.]],
--["Newton(fn,x0)"]        = [[Find root of equation using Newton's rule with only one initial condition.]],
--["solve(fn,a,b)"]        = [[Find root of equation fn(x)=0 at interval [a,b].]],
--["TOL[=0.001]"]          = [[The solution tolerance (0.001 by default).]],
--[=[["ode45(fn,tDelta,y0[,param])"] = [[Numerical approximation of the ODE solution.
First parameter is differential equation, second - time interval, third - initial function value. List of parameters is optional and can includes time step or exit condition.
Return table of intermediate points and result yn.]],]=]
--["trapez(fn,a,b)"]       = [[Get integral using trapezoidal rule.]],
--["der(fn,x)"]            = [[Calculate the derivative value for given function.]],
},
---------- special.lua ----------
Spec = {
["__module__"]           = [[Специальные функции.]],
--["gammaln(z)"]           = [[Natural logarithm of gamma function.]],
--["betaln(z,w)"]          = [[Natural logarithm of beta function.]],
--["beta(z,w)"]            = [[Beta function.]],
--["bessely(n,x)"]         = [[Bessel function of the second kind.]],
--["erfc(x)"]              = [[Complementary error function.]],
--["besselk(n,x)"]         = [[Modified Bessel function Kn(x).]],
--["besseli(n,x)"]         = [[Modified Bessel function In(x).]],
--["dawson(x)"]            = [[dawson integral.]],
--["gammainc(x,a[,type='lower')"] = [[Incomplete gamma function, P (type=lower) or Q (type=upper).]],
--["besselj(n,x)"]         = [[Bessel function of the first kind.]],
--["gamma(z)"]             = [[Gamma function.]],
--["legendre(n,x)"]        = [[Return list of legendre polynomial coefficients.]],
--["gammq(a,x)"]           = [[Incomplete gamma function Q(a,x) = 1-P(a,x).]],
--["betainc(x,a,b)"]       = [[Incomplete beta function Ix(a,b).]],
--["gammp(a,x)"]           = [[Incomplete gamma function P(a,x).]],
--["erf(x)"]               = [[Error function.]],
--["expint(n,x)"]          = [[Exponential integral En(x).]],
},
---------- graph.lua ----------
Graph = {
["__module__"]           = [[Операции с графами.]],
--["nodes(G)"]             = [[List of graph nodes.]],
--["pathBF(G,start[,goal])"] = [[Shortest path search using Bellman-Ford algorithm.]],
--["remove(G,e)"]          = [[Remove node or edge from the graph G. Node is a single name, edge - table of names.]],
--["pathD(G,start[,goal])"] = [[Find shortest path using Dijkstra's algorithm. Return table of distances and predecessors. If goal is defined, return path and its length.]],
--["edges(G)"]             = [[List of graph edges.]],
--["dfs(G,start,goal)"]    = [[Depth first search. Return result and found path.]],
--["copy(G)"]              = [[Get copy of the graph.]],
--["bfs(G,start,goal)"]    = [[Breadth first search. Return result and found path.]],
--["isWeighted(G)"]        = [[Check if the graph has weight different from 1.]],
--["add(G,e)"]             = [[Add new node or edge to graph G. Node denoted as a single name, edge is a table of names (and weights if need).]],
--["isDirected(G)"]        = [[Check if the graph has directed edges.]],
--["isNegative(G)"]        = [[Check if the graph has negative edges.]],
--["Graph(t)"]             = [[Create new graph.]],
--["isComplete(G)"]        = [[Check completeness of the graph.]],
},
---------- stat.lua ----------
Stat = {
["__module__"]           = [[Статистические вычисления. Исходные данные представлены в виде Lua таблиц.]],
--["tcdf(x,nu)"]           = [[Student's cumulative distribution.]],
--["harmmean(t[,w])"]      = [[Harmonic mean.]],
--["freq(t)"]              = [[Return table with frequencies of elements.]],
--["geomean(t[,w])"]       = [[Geometrical mean.]],
--["tpdf(x,nu)"]           = [[Student's distribution density.]],
--["moment(n,x[,p])"]      = [[Central moment of x order n, p is a list of weights.]],
--["chi2cdf(x,v)"]         = [[Chi-square cumulative distribution.]],
--["mean(t[,w])"]          = [[Calculate average value. Weights are can be used.]],
--["min(t)"]               = [[Minimal element and its index.]],
--["poisscdf(x,lam)"]      = [[Poisson cumulative distribution.]],
--["median(t)"]            = [[List median.]],
--["normpdf(x,nu,sig)"]    = [[Normal distribution density.]],
--["normcdf(x,mu,sig)"]    = [[Normal cumulative distribution.]],
--["fpdf(x,v1,v2)"]        = [[F distribution density.]],
--["fcdf(x,v1,v2)"]        = [[F cumulative distribution.]],
--["sum(t)"]               = [[Get sum of all elements.]],
--["chi2pdf(x,v)"]         = [[Chi-square distribution density.]],
--["hyst(data[,N[,a,b]])"] = [[Find hystogram for given data on the interval [a,b] with N ranges. Return table with scale (X) and frequencies (Y).]],
--["std(t[,w])"]           = [[Standard deviation and variance. Weights are can be used.]],
--["max(t)"]               = [[Maximal element and its index.]],
--["poisspdf(x,lam)"]      = [[Poisson distribution density.]],
},
---------- matrix.lua ----------
Mat = {
["__module__"]           = [[Операции с матрицами. На нулевые элементы память не расходуется.]],
--["rand(rows[,cols=rows])"] = [[Create matrix with random numbers from 0 to 1.]],
--[=[["concat(M1,M2,dir)"]    = [[Concatenate two matrix, dir='h' - in horizontal direction, dir='v' - in vertical
Use M1 .. M2 for horizontal concatenation and M1 // M2 for vertical.]],]=]
--["randi([M],N,[rows],[cols=rows])"] = [[Create matrix with random integer elements from 1 to N. Can be used as 'randi(M,N)' or 'randi(N,r,c)'.]],
--["norm(M)"]              = [[Euclidean norm.]],
--["fill(rows,cols,fn)"]   = [[Create matrix, using function fn(r,c).]],
--["copy(M)"]              = [[Return copy of matrix.]],
--["map(M,fn)"]            = [[Apply the given function to all elements, return new matrix. Function can be in form f(x) or f(x,row,col).]],
--["pinv(M)"]              = [[Pseudo inverse matrix calculation.]],
--["det(M)"]               = [[Calculate determinant.]],
--["reduce(M,fn,dir[='r'])"] = [[Evaluate s=fn(s,x) along rows (dir='r') or columns (dir='c').]],
--["table(M)"]             = [[Convert to simple Lua table.]],
--["chol(M)"]              = [[Cholesky decomposition of positive definite symmetric matrix.]],
--["size(M)"]              = [[Return number or rows and columns.]],
--["dot(V1,V2)"]           = [[Scalar product of two 3-element vectors]],
--["inv(M)"]               = [[Return inverse matrix.]],
--["cross(V1,V2)"]         = [[Cross product or two 3-element vectors.]],
--["diag(M[,n=0])"]        = [[Get diagonal of the matrix or create new matrix which diagonal elements are given. n is the diagonal index.]],
--["sum(M,dir)"]           = [[Find sum of elements along given direction ('r' or 'c').]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
--["lu(M)"]                = [[LU decomposition for the matrix. Return L,U and P matrices.]],
--["rref(M)"]              = [[Perform transformations using Gauss method.]],
--["eye(rows[,cols=rows,init=1])"] = [[Create identity matrix. Diagonal value (init) can be defined.]],
--["Mat(...)"]             = [[Create matrix from list of strings (tables).]],
--["transpose(M)"]         = [[Return matrix transpose. Shorten form is T().]],
--["ones(rows[,cols=rows,val=1])"] = [[Create matrix of given numbers (default is 1).]],
--["rank(M)"]              = [[Find rank of the matrix.]],
--["tr(M)"]                = [[Get trace of the matrix.]],
--["comparison"]           = [[a==b, a~=b]],
--["zeros(rows[,cols=rows])"] = [[Create matrix from zeros.]],
--["apply(fn,M1,M2,...)"]  = [[Apply function to the given matrices element-wise.]],
},
---------- polynom.lua ----------
Poly = {
["__module__"]           = [[Действия над полиномами]],
--["val(P,x)"]             = [[Get value of polynomial P in point x.]],
--["der(P)"]               = [[Calculate derivative of polynomial.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^n, -a]],
--["Poly(...)"]            = [[Create a polynomial.]],
--["int(P[,x0=0])"]        = [[Calculate integral, x0 - free coefficient.]],
--["fit(X,Y,ord)"]         = [[Find polynomial approximation for the line.]],
--["real(p)"]              = [[Find real roots of the polynomial.]],
--["comparison"]           = [[a==b, a~=b]],
--["build(root1,root2,...)"] = [[Return polynomial with given roots.]],
--["copy(P)"]              = [[Get copy of the polynomial.]],
},
---------- gnuplot.lua ----------
Gnu = {
["__module__"]           = [[Интерфейс для взаимодействия с Gnuplot.]],
--["copy(G)"]              = [[Get copy of the plot options.]],
--["plot(G)"]              = [[Plot data, represented as Lua table.]],
--[=[["keys"]                 = [[  Options description:
{'sin(x)'}                                   -- print sinus using Gnuplot functions
{math.sin, title='sinus'}                    -- plot using function, define in Lua; add legend
{file='sin.dat', ln=1, lw=2}                 -- plot data from file, use given color and width
{tbl, with='lines'}                          -- plot data from Lua table, use lines
title='Graph name'                           -- set title
xrange={0,10}                                -- range of x from 0 to 10
yrange={-2,2}                                -- range of y
zrange={0,5}                                 -- range of z
trange={1,2}                                 -- range for parametric functions
xtitle='A', ytitle='B'                       -- axes names
terminal='jpeg'                              -- save result as jpeg image
output='my_plot.jpg'                         -- file name
parametric=true                              -- create parametric plot
size='square'                                -- set square size
polar=true                                   -- use polar coordinate system
grid='polar'                                 -- polar grid
legend=false                                 -- don't use legend
surface=true                                 -- plot surface in 3D
samples=200                                  -- define number of points
permanent=true                               -- create in independent window
raw='set pm3d'                               -- set Gnuplot options manually
]],]=]
--["isAvailable(G)"]       = [[Check if all options in table are predefined in program.]],
--["Gnu([G])"]             = [[Transform given table into gnuplot object.]],
--["N[=100]"]              = [[If no samples, divide interval into N points.]],
},
---------- complex.lua ----------
Comp = {
["__module__"]           = [[Вычисления с комплексными числами.]],
--["abs(Z)"]               = [[Return module of complex number.]],
--["angle(Z)"]             = [[Return argument of complex number.]],
--["real(Z)"]              = [[Return the real part.]],
--["asinh(Z)"]             = [[Complex inverse hyperbolic sine.]],
--["atan(Z)"]              = [[Complex inverse tangent.]],
--["acos(Z)"]              = [[Complex inverse cosine.]],
--["Comp([a=0,]b)"]        = [[Create new complex number.]],
--["cos(Z)"]               = [[Return cosine of a complex number.]],
--["imag(Z)"]              = [[Return the imaginary part.]],
--["atanh(Z)"]             = [[Complex inverse hyperbolic tangent.]],
--["copy(Z)"]              = [[Create copy of the complex number.]],
--["log(Z)"]               = [[Complex logarithm.]],
--["acosh(Z)"]             = [[Complex inverse hyperbolic cosine.]],
--["conj(Z)"]              = [[Return the complex conjugate.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
--["sin(Z)"]               = [[Return sinus of a complex number.]],
--["asin(Z)"]              = [[Complex inverse sine.]],
--["tanh(Z)"]              = [[Return hyperbolic tangent of a complex number.]],
--["cosh(Z)"]              = [[Return hyperbolic cosine of a real or complex number.]],
--["trig(module,angle)"]   = [[Create complex number using module and angle.]],
--["_i"]                   = [[Complex unit.]],
--["sqrt(Z)"]              = [[Return square root. Result can be real of complex.]],
--["tan(Z)"]               = [[Return tangent of a complex number.]],
--["comparison"]           = [[a==b, a~=b]],
--["sinh(Z)"]              = [[Return hyperbolic sinus of a complex number.]],
--["exp(Z)"]               = [[Return exponent in for complex argument.]],
},
---------- files.lua ----------
File = {
["__module__"]           = [[Функции для работы с файлами и текстом.]],
--["split(str,delim)"]     = [[Return iterator over substrings separated by the delimiter.]],
--["read(fName)"]          = [[Return file content as a text.]],
--["dsvWrite(fname,tbl[,delim=','])"] = [[Save Lua table as delimiter separated data into file.]],
--["tblImport(fName)"]     = [[Import Lua table, written into file.]],
--["dsvRead(fName[,delim=','])"] = [[Read delimiter separated data as Lua table.]],
},
}