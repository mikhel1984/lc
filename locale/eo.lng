---------- locale/eo.lng ----------
{
language =	 'Esperanto',
authors = [[Stanislav Mikhel]],
---------- dialog ----------
Dialog = {
["alias"]                = [[Usu la alias '%s' aliri la modulo '%s'.]],
["done"]                 = [[Preta.]],
["intro"]                = [[-------- help([functio]) = akiri helpon -----------
--------- import(modulo) = piliigi la funcionalidad
------- run(dosieronomo) = kuru Lua-scripto -------
----------------- quit() = finu -------------------
]],
["use_import"]           = [[Usu
  import 'modulo' ['modulo2' 'modulo3' ...]
por akiri ekstrajn modulojn.]],
},
---------- main.lua ----------
Main = {
["__module__"]           = [[Komputado sistemo bazita sur Lua.]],
["_ans"]                 = [[Resulto de la lasta operacio.]],
["lc.show(t[,N=10])"]    = [[Presi Lua tablo en uzanta formato. Demandi pri daǔrigo post ĉiu N elementoj]],
["atan2(y,x)"]           = [[Tangentarco de nombro y/x kun signoj.]],
["cosh(x)"]              = [[La hiperbola kosinuso de nombro x.]],
["asinh(x)"]             = [[La hiperbola sinusarko de nombro x.]],
["_pi"]                  = [[Nombro pi.]],
["sqrt(a)"]              = [[Kvadrata radiko.]],
["lc.evalTF(src[,dst])"] = [[Legi tekstan dosieron kay taksi esprimoj en ##..##. Savi la resulton en la teksto-dosiero, se necesas.]],
["exp(x)"]               = [[La exponenta dependeco.]],
["lc.map(fn,tbl)"]       = [[Taksi funkcion por ĉiu elemento de la tablo.]],
["atanh(x)"]             = [[Hiperbola tangentarco de nombro.]],
["atan(x)"]              = [[Tangentarco de nombro x.]],
["rand()"]               = [[Hazarda nombro inter 0 kaj 1.]],
["lc.range([from=1,]to[,step=1])"] = [[Produkti tablo kun vico de nombroj.]],
["asin(x)"]              = [[La sinusarko de nombro x.]],
["log(x)"]               = [[Natura logaritmo.]],
["tanh(x)"]              = [[Hiperbola tangento.]],
["randi(N)"]             = [[Hazarda entrejo de 1 al N.]],
["lc.sci(x)"]            = [['Scienca' formo de nombro.]],
["lc.round(x[,n=0])"]    = [[Rondu nombro, difini kvanto de dekumaj ciferoj.]],
["tan(x)"]               = [[La tangento de nombro x.]],
["sinh(x)"]              = [[Hyperbola sinuso.]],
["acosh(x)"]             = [[La hiperbola kosinusarko de nombro x.]],
["sin(x)"]               = [[La sinuso de nombro x.]],
["lc.type(t)"]           = [[Montri objektan tipon.]],
["cos(x)"]               = [[La kosinuso de nombro x.]],
["abs(x)"]               = [[La absoluta valoro.]],
["_e"]                   = [[Eǔlera nombro.]],
["acos(x)"]              = [[La kosinusarko de nombro x.]],
},
---------- units.lua ----------
Unit = {
["__module__"]           = [[Operacioj kun unuoj de mezuroj.]],
["prefix"]               = [[Prefikso tablo.]],
["copy(U)"]              = [[Krei kopion de objecto.]],
["add(U,rule)"]          = [[Aldoni regulon por konverti unuojn de mezuro.]],
["Unit(v[,u])"]          = [[Krei novan valoron kun unuoj de mezuro.]],
--["comparison"]           = [[U1==U2, U1~=U2, U1<U2, U1<=U2, U1>U2, U1>=U2]],
--["arithmetic"]           = [[U1+U2, U1-U2, U1*u2, U1/U2, U1^n]],
["convert(v, units)"]    = [[Konvertas unuojn de mezuro, redonas novan objector aǔ nil. 'units' povas esti teksto aǔ funkcio. 
Operacio v['units'] redonas nur la nombro.]],
},
---------- stat.lua ----------
Stat = {
["__module__"]           = [[Statistikaj kalkuloj. Datumoj devas esti reprezentita kiel tablo Lua.]],
["max(t)"]               = [[La plej granda nombro kaj ĝia indekso.]],
["moment(n,x[,p])"]      = [[Momento de x kun n ordo, p estas listo de pezoj.]],
["hyst(data[,N[,a,b]])"] = [[Kalkulas histogramon por la donitaj datumoj sur la intervalo [a,b] kun N gamoj. Revenas tabulon kun skalo (X) kaj oftecoj (Y).]],
["std(t[,w])"]           = [[Norma devio kaj vario. Pezoj povas esti prenita en konto.]],
["normcdf(x,mu,sig)"]    = [[Normala akumula distribuo.]],
["poisspdf(x,lam)"]      = [[Dissendo denseco de la Poisson.]],
["min(t)"]               = [[La plej malgranda nombro kaj ĝia indekso.]],
["median(t)"]            = [[Meza de la listo.]],
["normpdf(x,nu,sig)"]    = [[Normala dissendo denseco.]],
["tpdf(x,nu)"]           = [[Dissendo denseco de la Studento.]],
["mean(t[,w])"]          = [[Kalkuli averaĝo. Pezoj povas esti prenita en konto.]],
["fpdf(x,v1,v2)"]        = [[F dissendo denseco.]],
["fcdf(x,v1,v2)"]        = [[F akumula distribuo.]],
["geomean(t[,w])"]       = [[La geometria meznombro.]],
["poisscdf(x,lam)"]      = [[Akumula distribuo-funkcio de la Poisson.]],
["sum(t)"]               = [[Kalkuli sumon de ĉiuj elementoj.]],
["chi2pdf(x,v)"]         = [[Chi-2 dissendo denseco.]],
["freq(t)"]              = [[Revenas tablon kun la oftecoj de elementoj.]],
["chi2cdf(x,v)"]         = [[Akumula distribuo-funkcio chi-2.]],
["tcdf(x,nu)"]           = [[Akumula distribuo-funkcio de la Studento.]],
--["harmmean(t[,w])"]      = [[Harmonic mean.]],
},
---------- struct.lua ----------
DS = {
["__module__"]           = [[Bazaj datumoj strukturoj.]],
["Stack.isEmpty(S)"]     = [[Revenas 'true' se la stako estas malplena.]],
["Heap.isEmpty(H)"]      = [[Revenas 'true' se la amaso estas malplena.]],
["Queue.isEmpty(Q)"]     = [[Revenas 'true' se la vosto estas malplena.]],
--["Set: union, intersection, difference"] = [[S1+S2, S1*S2, S1/S2]],
--["Queue.front(Q)"]       = [[Get next element, don't remove it.]],
["Set.remove(S,val)"]    = [[Forigi elementon.]],
--["Heap.size(H)"]         = [[Get number of elements in the heap.]],
["Queue.pop(Q)"]         = [[Akiri valoron de la vosto.]],
["Heap.copy(H)"]         = [[Reveni kopion de la amaso.]],
["Set.copy(S)"]          = [[Krei kopion de aro.]],
--["Heap.top(H)"]          = [[Return value of the top element.]],
["Set.map(S,fn)"]        = [[Apliki la funkcion fn() al la aro elemento.]],
--["Set: comparison"]      = [[S1==S2, S1~=S2, S1<S2, S1<=S2, S1>S2, S1>=S2]],
["Set.add(S,val)"]       = [[Aldoni elementon.]],
["Stack.copy(S)"]        = [[Reveni kopion de la stako.]],
--["Queue.pushFront(Q,val)"] = [[Add value to the top of queue.]],
["Stack()"]              = [[Krei novan stakon.]],
--["Heap.pop(H)"]          = [[Return top element. For the default less() function top is maximum.]],
--["Heap.push(H,v)"]       = [[Add element to the heap.]],
--["Queue.size(Q)"]        = [[Return number of elements in queue.]],
["Stack.push(S,val)"]    = [[Aldoni valoron al la stako (krom 'nil').]],
["Queue.push(Q,val)"]    = [[Aldoni valoron al la vosto.]],
["Stack.pop(S)"]         = [[Revenas sekvantan valoron de la stako aǔ 'nil'.]],
["Queue.copy(Q)"]        = [[Reveni kopion de la vosto.]],
--["Stack.top(S)"]         = [[Return top value without removing it.]],
["Set(t)"]               = [[Krei novan aron el listo (tablo) de elementoj.]],
["Set.isEmpty(S)"]       = [[Revenas 'true' se la aro estas malplena.]],
--["Set.size(S)"]          = [[Number of elements in the set.]],
--["Queue.popBack(Q)"]     = [[Get value from the end of queue, remove it.]],
--["Queue.back(Q)"]        = [[Get next element, don't remove it.]],
--["Stack.size(S)"]        = [[Return number of elements in stack.]],
["Set.list(S)"]          = [[Prezenti aron en la formo de tablo.]],
["Queue()"]              = [[Krei novan voston.]],
["Heap([less])"]         = [[Krei novan amason. Komparao metodo 'less()' povas esti antaǔdecidita.]],
},
---------- matrix.lua ----------
Mat = {
["__module__"]           = [[Operacioj kun matricoj. La matricoj estas maldensa defaǔlte.]],
--["comparison"]           = [[a==b, a~=b]],
["ones(rows[,cols=rows,val=1])"] = [[Kreu matricon plenigita de donita nombro.]],
["rref(M)"]              = [[PGaǔsa transformo.]],
["tr(M)"]                = [[Spuro de matrico.]],
["Mat(...)"]             = [[Krei novan matricon de la listo de vicoj (tabloj).]],
["chol(M)"]              = [[Ĉoleska transformo de pozitiva simetria matrico.]],
["rand(rows[,cols=rows])"] = [[Krei matricon de hazardaj nombroj inter 0 kaj 1.]],
--[=[["concat(M1,M2,dir)"]    = [[Concatenate two matrix, dir='h' - in horizontal direction, dir='v' - in vertical
Use M1 .. M2 for horizontal concatenation and M1 // M2 for vertical.]],]=]
--["cross(V1,V2)"]         = [[Cross product or two 3-element vectors.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
["fill(rows,cols,fn)"]   = [[Kreu matrico uzante la funkcio fn(r,c).]],
["sum(M,dir)"]           = [[Kalkuli sumon de elementoj por vicoj aǔ kolumnoj ('r' aǔ 'c').]],
--["randi([M],N,[rows],[cols=rows])"] = [[Create matrix with random integer elements from 1 to N. Can be used as 'randi(M,N)' or 'randi(N,r,c)'.]],
["rank(M)"]              = [[Trovi rangon de la matrico.]],
["inv(M)"]               = [[Redonas la inversa matrico.]],
["reduce(M,fn,dir[='r'])"] = [[Taksi funkcion s=fn(s,x) por vicoj (dir='r') aǔ kolumnoj (dir='c')]],
["zeros(rows[,cols=rows])"] = [[Krei nula matrico.]],
["apply(fn,M1,M2,...)"]  = [[Apliki la funkcion al ĉiu elemento de matricoj.]],
["eye(rows[,cols=rows,init=1])"] = [[Krei identeca matrico.]],
["lu(M)"]                = [[LU transformo de la matrico. Redonas L,U kaj P valoroj.]],
--["table(M)"]             = [[Convert to simple Lua table.]],
["transpose(M)"]         = [[Redonas la transposta matrico. La sama al T().]],
--["dot(V1,V2)"]           = [[Scalar product of two 3-element vectors]],
--["norm(M)"]              = [[Euclidean norm.]],
["det(M)"]               = [[Matrico determinanto.]],
["diag(M[,n=0])"]        = [[Ĉerpti la diagonalajn elementojn aǔ krei novan matricon kun donita diagonalo. n estas delokigo.]],
["pinv(M)"]              = [[Redonas pseǔdon-inversa matrico.]],
--["size(M)"]              = [[Return number or rows and columns.]],
["copy(M)"]              = [[Krei kopion de la matrico.]],
["map(M,fn)"]            = [[Apliki la funkcion fn(row[,col,val]) al ĉiuj elementoj, redoni novan matricon.]],
},
---------- numeric.lua ----------
Num = {
["__module__"]           = [[Grupo de funkcioj por la numeraj kalkuloj. Toleremo estas difinita per TOL.]],
["TOL[=0.001]"]          = [[Precizeco de kalkuloj.]],
["solve(fn,a,b)"]        = [[Trovu la radiko de ekvacio fn(x)=0 en la intervalo [a,b].]],
["Newton(fn,x0)"]        = [[Trovu la radiko de ekvacio uzante la metodon de Newton, x0 estas komenca proksimiĝo.]],
["ode45(fn,tDelta,y0[,param])"] = [[Nombra solvo de ODE.
Se la paŝo dx ne estas specifita, tiam ĝi estas kalkulita aǔtomate laǔ la postulata precizeco.
Redonas liston de interaj punktoj kaj rezulton yn.]],
["der(fn,x)"]            = [[Kalkuli derivaĵon de la funkcio.]],
["trapez(fn,a,b)"]       = [[Kalkuli la integralo uzante la metodon de trapezoj.]],
},
---------- bigint.lua ----------
Big = {
["__module__"]           = [[Operacioj kun la arbitraj longaj entjeroj.]],
--["comparison"]           = [[a<b, a<=b, a>b, a>=b, a==b, a~=b]],
["Big(v)"]               = [[Krei novan arbitra longa entjero bazitan sur la nombro aǔ teksto.]],
["fact(B)"]              = [[Revenas faktorialon de la ne indika entjera nombro n.]],
["val(N)"]               = [[Prezenti grandan entjeron en nombra formo se eble.]],
["abs(v)"]               = [[Absoluta valoro.]],
["str(B[,n=3])"]         = [[Pli konvena reprezento de la granda entjero.]],
["eq(a,b)"]              = [[Egaleco kontrolo.]],
["copy(v)"]              = [[Krei kopion de granda entjero.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a%b, a^b, -a, #a]],
--["size(B)"]              = [[Number of digits, the same as #B.]],
},
---------- const.lua ----------
_C = {
["__module__"]           = [[Iuj konstantaj valoroj.]],
--["astro.pc"]             = [[One parsec.]],
["phy.e"]                = [[Electrono ŝarĝo.]],
--["phy.sigma"]            = [[Stefan-Boltzmann constant.]],
["phy.NA"]               = [[Nombro de Avogadro.]],
["math.phi"]             = [[Ora proporcio.]],
--["math.EuMa"]            = [[Difference between harmonic series and the natural logarithm.]],
--["remove(name)"]         = [[Delete constant.]],
["phy.c"]                = [[Rapido de lumo.]],
--["phy.Rinf"]             = [[Rydberg constant]],
["phy.Vm"]               = [[Unu mole de ideala gaso volumo.]],
["phy.g"]                = [[Senpaga akcelo.]],
["phy.G"]                = [[Gravita konstanto.]],
["phy.k"]                = [[Konstanto de Boltzmann.]],
["phy.h"]                = [[Konstanto de Planck.]],
--["add(name,value)"]      = [[Create new constant.]],
--["astro.ly"]             = [[One light year.]],
["phy.mu0"]              = [[Magneta konstanto.]],
["phy.eps0"]             = [[Elektra konstanto.]],
["phy.R"]                = [[Universaa gaso konstanto.]],
},
---------- complex.lua ----------
Comp = {
["__module__"]           = [[Operacioj kun la kompleksaj nombroj.]],
--["comparison"]           = [[a==b, a~=b]],
--["real(Z)"]              = [[Return the real part.]],
--["tan(Z)"]               = [[Return tangent of a complex number.]],
--["angle(Z)"]             = [[Return argument of complex number.]],
--["copy(Z)"]              = [[Create copy of the complex number.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^b, -a]],
--["Comp([a=0,]b)"]        = [[Create new complex number.]],
--["conj(Z)"]              = [[Return the complex conjugate. Equal to ~Z.]],
--["sqrt(Z)"]              = [[Return square root. Result can be real of complex.]],
--["tanh(Z)"]              = [[Return hyperbolic tangent of a complex number.]],
--["asin(Z)"]              = [[Complex inverse sine.]],
--["cos(Z)"]               = [[Return cosine of a complex number.]],
--["acosh(Z)"]             = [[Complex inverse hyperbolic cosine.]],
--["atanh(Z)"]             = [[Complex inverse hyperbolic tangent.]],
--["exp(Z)"]               = [[Return exponent in for complex argument.]],
--["asinh(Z)"]             = [[Complex inverse hyperbolic sine.]],
--["atan(Z)"]              = [[Complex inverse tangent.]],
["_i"]                   = [[Kompleksa unuo.]],
--["log(Z)"]               = [[Complex logarithm.]],
["trig(module,angle)"]   = [[Uzi geometria prezento por kompleksa nombro.]],
--["sin(Z)"]               = [[Return sinus of a complex number.]],
--["abs(Z)"]               = [[Return module of complex number.]],
--["acos(Z)"]              = [[Complex inverse cosine.]],
--["cosh(Z)"]              = [[Return hyperbolic cosine of a real or complex number.]],
--["sinh(Z)"]              = [[Return hyperbolic sinus of a complex number.]],
--["imag(Z)"]              = [[Return the imaginary part.]],
},
---------- rational.lua ----------
Rat = {
["__module__"]           = [[Komputadoj kun la raciaj nombroj.]],
--["comparison"]           = [[R1<R2, R1<=R2, R1>R2, R1>=R2, R1==R2, R1~=R2]],
["val(R)"]               = [[Revenas racia nombro en dekuma formo.]],
["De(R)"]                = [[Denominatoro de racia nombro.]],
["gcd(a,b)"]             = [[Plej granda komuna divizoro.]],
["copy(R)"]              = [[Kreu kopion de la racia nombro.]],
--["arithmetic"]           = [[R1+R2, R1-R2, R1*R2, R1/R2, -R, R1^R2} ]],
["Nu(R)"]                = [[Numeratoro de racia nombro.]],
["Rat(m[,n=1])"]         = [[Krei novan racian nombron. m - numeratoro, n - denominatoro.]],
},
---------- gnuplot.lua ----------
Gnu = {
["__module__"]           = [[Interfaco por laborado kun Gnuplot de Lua.]],
["isAvailable(G)"]       = [[Kontrolu plenumon kaj antaǔdifinitaj opcioj.]],
["keys"]                 = [[  Priskribo de parametroj:
{'sin(x)'}                                   -- konstrui grafeon por sinuso
{math.sin, title='sinus'}                    -- grafeon por Lua funkcio, aldoni priskribon
{file='sin.dat', ln=1, lw=2}                 -- grafeon por datumndosieron, specifi koloron kaj dikecon
{tbl, with='lines'}                          -- grafeon por Lua tabulo, uzi linioj
title='Graph name'                           -- apudskribo
xrange={0,10}                                -- gamo x de 0 ĝis 10
yrange={-2,2}                                -- gamo y
zrange={0,5}                                 -- gamo z
trange={1,2}                                 -- gamo por parametria funkcio
xtitle='A', ytitle='B'                       -- aksaj nomoj
terminal='jpeg'                              -- savi la rezulton kiel jpeg bildon
output='my_plot.jpg'                         -- dosiernomo
parametric=true                              -- parametria grafeo
size='square'                                -- kvadrata bildo
polar=true                                   -- uzi polusa grafeo
grid='polar'                                 -- polusa koordinata sistemo
legend=false                                 -- malebligi priskribon
surface=true                                 -- tridimensia grafeo
samples=200                                  -- nombro da punktoj
permanent=true                               -- sendependa grafeo
raw='set pm3d'                               -- fiksi la Gnuplot parametrojn permane 
]],
["copy(G)"]              = [[Krei kopion la parametroj de grafeo.]],
["plot(G)"]              = [[Konstrui funkcian grafeon. Parametroj estas specifita en Lua table G.]],
["Gnu([G])"]             = [[Konverti Lua tablon al 'gnuplot' objekto.]],
["N[=100]"]              = [[Nombro da punktoj sur la grafikaĵo se la parametro 'samples' ne estas specifita.]],
},
---------- array.lua ----------
Arr = {
["__module__"]           = [[Manipuladoj kun la tabelo de elementoj. Indeksado komencoj de unu. Indico estas tablo.]],   
["get(A,tInd)"]          = [[Redonai elementon de tabelo.]],
["copy(A)"]              = [[Kreu kopion de la tabelo.]],
["isEqual(A1,A2)"]       = [[Kontroli egalecon de dimensioj.]],
["next(A)"]              = [[Revenas funkcion por preterpasi ĉiujn indicojn kaj valorojn.]],
["set(A,tInd,val)"]      = [[Aldonu valoro al la tabelo. Indico estas tablo.]],
["Arr(tSize)"]           = [[Krei malplenan tabelon. Dimensio estas tablo.]],
--["capacity(A)"]          = [[Maximal number of elements in the array. The same as #A.]],
["apply(func, ...)"]     = [[Aplikas funkcion al la valoroj de du tabeloj. Redonas novan tabelon.]],
["dim(A)"]               = [[Redonas dimension de la tabelo.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, -a, a^b]],
["concat(A1,A2,nAxis)"]  = [[Kombini tabeloj laǔ donita akso.]],
["sub(A,tInd1,tInd2)"]   = [[Redonas la parton de tabelo limigita de 2 indicoj.]],
--["comparison"]           = [[a == b, a ~= b]],
["rand(tSize)"]          = [[Redonas tabulon de hazarda nombroj inter 0 kaj 1.]],
["map(A,func)"]          = [[Aplikas funkcion al la tabelo. Redonas novan tabelon.]],
},
---------- polynom.lua ----------
Poly = {
["__module__"]           = [[Operacioj kun polinomoj.]],
--["comparison"]           = [[a==b, a~=b]],
["val(P,x)"]             = [[Kalkulu la valoro de polinomo P je koordinato x. La sama al P(x).]],
["fit(X,Y,ord)"]         = [[Trovi la polinoman alproksimiĝon por la kurbo.]],
["copy(P)"]              = [[Krei kopion de polinomo.]],
["real(p)"]              = [[Trovi la realan radikojn de polinomo.]],
--["arithmetic"]           = [[a+b, a-b, a*b, a/b, a^n, -a]],
["der(P)"]               = [[Trovi la derivaĵon de polinomo.]],
["int(P[,x0=0])"]        = [[Trovi la integralo de polinomo, x0 - libera faktoro.]],
["Poly(...)"]            = [[Krei novan poinoman.]],
["build(root1,root2,...)"] = [[Kalkuli la polinomon per konataj radikoj.]],
},
---------- special.lua ----------
Spec = {
["__module__"]           = [[Specialaj matematikaj funkcioj.]],
["erf(x)"]               = [[Eraro funkcio.]],
--["besselk(n,x)"]         = [[Modified Bessel function Kn(x).]],
["gamma(z)"]             = [[Gama-funkcio.]],
["betainc(x,a,b)"]       = [[Nekompleta beta-funkcio Ix(a,b).]],
["dawson(x)"]            = [[Dawson integralo.]],
["expint(n,x)"]          = [[Eksponenta integralo En(x).]],
["gammaln(z)"]           = [[Naturala logaritmo de la gama-funkcio.]],
--["besselj(n,x)"]         = [[Bessel function of the first kind.]],
["erfc(x)"]              = [[Kompletiga eraro funkcio.]],
--["bessely(n,x)"]         = [[Bessel function of the second kind.]],
["gammq(a,x)"]           = [[Nekompleta gama-funkcio Q(a,x) = 1-P(a,x).]],
["beta(z,w)"]            = [[Beta-funkcio.]],
--["gammainc(x,a[,type='lower')"] = [[Incomplete gamma function, P (type=lower) or Q (type=upper).]],
["gammp(a,x)"]           = [[Nekompleta gama-funkcio P(a,x).]],
["betaln(z,w)"]          = [[Naturala logaritmo de la beta-funkcio.]],
["legendre(n,x)"]        = [[Listo de la Legendre polinomoj koeficientoj.]],
--["besseli(n,x)"]         = [[Modified Bessel function In(x).]],
},
---------- files.lua ----------
File = {
["__module__"]           = [[Rutinoj por labori kun datumja dosieroj kaj tekstoj.]],
--["read(fName)"]          = [[Return file content as a text.]],
["split(str,delim)"]     = [[Generas funkcion, kiu redonas partojn de la teksto apartigita per delimitilo.]],
["dsvWrite(fname,tbl[,delim=','])"] = [[Savi Lua tabulon kiel dosieron kun delimitilo disigita datumojn.]],
["dsvRead(fName[,delim=','])"] = [[Legas datumojn disigitaj per delimitilo en la dosiero, revenas Lua tabulon.]],
["tblImport(fName)"]     = [[Importi Lua tabulo de la dosiero.]],
},
---------- graph.lua ----------
Graph = {
--["__module__"]           = [[Operations with graphs.]],
--["isWeighted(G)"]        = [[Check if the graph has weight different from 1.]],
--["edges(G)"]             = [[List of graph edges.]],
--["pathBF(G,start[,goal])"] = [[Shortest path search using Bellman-Ford algorithm.]],
--["copy(G)"]              = [[Get copy of the graph.]],
--["isComplete(G)"]        = [[Check completeness of the graph.]],
--["Graph(t)"]             = [[Create new graph.]],
--["dfs(G,start,goal)"]    = [[Depth first search. Return result and found path.]],
--["remove(G,e)"]          = [[Remove node or edge from the graph G. Node is a single name, edge - table of names.]],
--["add(G,e)"]             = [[Add new node or edge to graph G. Node denoted as a single name, edge is a table of names (and weights if need).]],
--["isDirected(G)"]        = [[Check if the graph has directed edges.]],
--["pathD(G,start[,goal])"] = [[Find shortest path using Dijkstra's algorithm. Return table of distances and predecessors. If goal is defined, return path and its length.]],
--["bfs(G,start,goal)"]    = [[Breadth first search. Return result and found path.]],
--["nodes(G)"]             = [[List of graph nodes.]],
--["isNegative(G)"]        = [[Check if the graph has negative edges.]],
},
}