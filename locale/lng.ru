-- LuaCalc - Russian localisation - Русская локализация
{
------------------- base module ---------------
Calc = {
     __main__       = "Lua как расширяемый калькулятор",
-------------------- menu etc. ----------------
      intro         = [[
Чтобы загрузить дополнительные модули, используйте 'import(module)'.
Справка доступна по команде 'help([функция])'.
Чтобы завершить работу, наберите 'quit()'.
]],
    use_import      = [[
    
Используйте
  import 'module' ['module2' 'module3' ...]
для добавления дополнительных модулей.]],
     modules        = "Доступные модули:",
      base          = "базовые",
  trigonometry      = "тригонометрические",
   hyperbolic       = "гиперболические",
    constants       = "константы",
     other          = "прочие",
   constructor      = "конструктор объекта",
     done           = "Выполнено.",
    alias           = "Используйте имя '%s' для доступа к модулю '%s'.",
--------------------- functions -----------------
["abs(x)"]          = "Абсолютная величина.",
["exp(x)"]          = "Экспоненциальная зависимость.",
["ln(x)"]           = "Натуральный логарифм.",
["lg(x)"]           = "Десятичный логарифм.",
["pow(a,b)"]        = "Вычисляет a^b.",
["sqrt(a)"]         = "Квадратный корень числа.",
["max(...)"]        = "Находит максимальное из чесел.",
["min(...)"]        = "Находит минимальное из чисел.",
["rand()"]          = "Случайное число между 0 и 1.",

["sin(x)"]          = "Синус числа x.",
["cos(x)"]          = "Косинус числа x.",
["tan(x)"]          = "Тангенс числа x.",
["asin(x)"]         = "Арксинус числа x.",
["acos(x)"]         = "Арккосинус числа x.",
["atan(y[,x])"]     = "Арктангенс числа y. Если заданы 2 аргумента, тангенс определяется как y/x с учётом знаков.",

["ch(x)"]           = "Гиперболический косинус x.",
["sh(x)"]           = "Гиперболический синус x.",
["th(x)"]           = "Гиперболический тангенс x.",
["ash(x)"]          = "Гиперболический арксинус x.",
["ach(x)"]          = "Гиперболический арккосинус x.",
["ath(x)"]          = "Гиперболический арктангенс x.",

["deg(x)"]          = "Преобразование радиан в градусы.",
["rad(x)"]          = "Преобразование градусов в радианы.",

["_pi"]             = "Число пи.",
["_e"]              = "Число Эйлера.",

["fx(str)"]         = "Преобразование строкового выражения от x в функцию Lua.",
["plot(str[,a,b])"] = "Построение графика строчного выражения в Gnuplot. Выражение должно выражать зависимость от x. Можно указать интервал [a;b].",
["eval(fn,x1[,xn[,step]])"] = "Вычисление функции на интервале с заданным шагом. Результат выводится на экран.",
},
--------------------- 'bigint' ----------------------
Big = {
     __main__       = "Операции с целыми числами произвольной точности.",
['BASE']            = "Основание системы счисления.",
["abs(v)"]          = "Абсолютное значение целого числа.",
["copy(v)"]         = "Создаёт копию числа.",
["eq(a,b)"]         = "Проверяет равенство двух чисел.",
["tonumber(v)"]     = "Преобразует число к целому либо с плавающей точкой.",
["factorial(n)"]    = "Вычисляет факториал заданного числа.",
["Big(v)"]          = "Создаёт целое число произвольной точности из обычного числа или строки.",
["serialize(obj)"]  = "Строковое представление числа произвольной точности с учётом внутренней структуры.",
},
-------------------- 'complex' ----------------------
Cmp = {
     __main__       = "Комплексные числа и манипуляции с ними.",
["arg(v)"]          = "Вычисляет аргумент (угол) комплексного числа.",
["abs(v)"]          = "Возвращает модуль комплексного числа.",
["conj(v)"]         = "Возвращает комплексно сопряжённое число.",
["Re(v)"]           = "Действительная часть числа.",
["Im(v)"]           = "Мнимая часть числа.",
["sqrt(v)"]         = "Квадратный корень положительного или отрицательного числа.",
["_i"]              = "Комплексная единица.",
["Cmp(a [,b])"]     = "Создаёт комплексное число через указание действительной (и мнимой) частей.",
["serialize(obj)"]  = "Строковое представление комплексного числа с учётом внутренней структуры.",
},
-------------------- 'gnuplot' ----------------------
Gnu = {
     __main__       = "Интерфейс для работы с Gnuplot из Lua.",
["N"]               = "Если шаг не указан, интервал делится на данное количество отрезков.",
["plot2d(g)"]       = "Строит двумерный график на основе данных и параметров, представленных таблицей Lua.",
["Gnu([g])"]        = "Делает таблицу Gnuplot-совместимым объектом программы.",
['keys']            =
[[ Описание таблицы:
{'sin(x)'}                                   -- рисует синус используя встроенные функции Gnuplot
{math.sin, title='sinus'}                    -- рисует функцию, определённую в Lua; добавляет легенду
{'sin.dat', type='data', smooth='unique'}    -- рисует данные из файла, определяет тип данных и сглаживание
{tbl, type='data', tible='Table of results'} -- рисует данные из таблицы Lua, без сглаживания
{math.sin, math.cos, type='parametric'}      -- параметрически заданная функция в Lua
{'sin(t), cos(t)', type='parametric'}        -- параметрически заданная функция в Gnuplot
title='Graph name'                           -- наименование графика
xrange={0,10,0.1}                            -- диапазон x от 0 до 10, для Lua-функция шаг вычисления 0.1
yrange={-2,2}                                -- диапазон y
trange={1,2}                                 -- диапазон для параметрически заданных функций
xtitle='A', ytitle='B'                       -- наименование осей
separator=','                                -- сепаратор при чтении данных из файла
permanent=true                               -- сохранять окно открытым при окончании работы программы
]],
},
--------------------- 'matrix' ----------------------
Mat = {
     __main__       = "Операции с матрицами. Индексация начинается с 0. По-умолчанию, матрицы разряжённые.",
["get(m,row,col)"]  = "Возвращает значение элемента. Можно просто использовать операцию m(row,col).",
["set(m,val,row,col)"] = "Установить значение элемента матрицы.",
["transpose(m)"]    = "Возвращает транспонированную матрицу.",
["size(m)"]         = "Возвращает число строк и столбцов матрицы.",
["map(m,fn)"]       = "Применяет указанную функцию fn(x) ко всем элементам матрицы.",
["copy(m)"]         = "Возвращает копию матрицы.",
["det(m)"]          = "Определитель матрицы.",
["inv(m)"]          = "Вычисляет обратную матрицу.",
["rref(m)"]         = "Применяет метод Гаусса для решения системы линейных уравнений. Возвращает полученную матрицу и детерминант.",
["vector(...)"]     = "Строит вектор из списка чисел.",
["zeros(rows[,cols])"] = "Матрица нулей с заданными размерами.",
["rand(rows[,cols])"] = "Матрица случайных чисел от 0 до 1.",
["eye(rows[,cols])"] = "Единичная матрица заданного размера.",
["sub(m,r1,r2,c1,c2)"] = "Возвращает подматрицу для указанного интервала строк и столбцов.",
["concat(m1,m2,dir)"] = "Объединяет 2 матицы по горизонтали (dir='h') или вертикади (dir='v').\nДля горизонтальной конкатенации можно использовать запись m1..m2, для вертикальной - m1//m2.",
["svd(M)"]            = "SVD разложение матрицы.",
},
-------------------- 'numeric' ----------------------
Num = {
},
-------------------- 'polynom' ----------------------
Poly = {
},
-------------------- 'rational' ---------------------
Rat = {
},
---------------------- 'set' ------------------------
Set = {
     __main__       = "Работа с множествами элементов.",
["check(set,val)"]  = "Проверить пренадлежность элемента множеству.",
["insert(set,val)"] = "Добавить в множество заданный элемент.",
["remove(set,val)"] = "Удалить из множества заданный элемент.",
["table(set)"]      = "Представить множество в виде Lua-таблицы.",
["Set(t)"]          = "Создать множество из элементов таблицы.",
["serialize(obj)"]  = "Строковое представление множества с учётом внутренней структуры.",
},
}
